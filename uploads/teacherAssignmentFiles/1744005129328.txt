Simple JavaScript Summary

JavaScript is a scripting language.
javaScript is case-Sensitive.

we use // for single-line comment.
we use /* comment */ for multi-line comment.
JavaScript run from top to button.
always end with semi-columns


JavaScript Variables: variables are containers for storing data.

3 types of variables:

1) Var: 
example: var x = 5;
         var y = 6;
         var z = x + y;

2) Let:
example: let x = 5;
         let y = 6;
         let z = x + y;
3) const:
examples: const const1 = 5;
          const const2 = 6;
          let total = const1 + const2;

When to use Var, let and cosnt?
Always declare variables.
always use const if the value should not be changed.
only use let if you can't use const.
only use var if you must support old browsers.

var : Variable can be re-declared & updated. A global scope variable.

let : Variable cannot be re-declared but can be updated. A block scope variable.

const : Variable cannot be re-declared or updated. A block scope variable. 


the 5 most common Operators:

 = : assignment operator
+ , - , * , / : Addition, subtraction, multification and division.

Shorthand:
myVar = 5;
myVar += 5; //output: 10

myVar -= 4; //output: 1

myVar *= 1; //output: 1

myVar /= 1; output: 1;


* To print : console.log (" // printing value ")

*Booleans:
A boolean is a value that returns True or False. Maily it is used in if-else , loop.

* If Statement: (Control Flow and Logic)

use if statement , if a specified condition is true.
use else statement, if a specified condtion is false.
use else if statement, if the first condtion id false.
use switch to specify many alternatives block of code to be executed.

if ( //condition) 
{
//block of code
 }


if (condition) {
  //  block of code to be executed if the condition is true
} else {
  //  block of code to be executed if the condition is false
}


if (condition1) {
  //  block of code to be executed if condition1 is true
} else if (condition2) {
  //  block of code to be executed if the condition1 is false and condition2 is true
} else {
  //  block of code to be executed if the condition1 is false and condition2 is false
}


*Comparasion operator

== -> check or compare wheather it is equal or not.
== -> check both datatypes and compare too.
!= -> check not equal to
!== -> check both not eual to and types too.

*Logical Operator:
 given: x = 6 and y = 3

&& => and  (x < 10 && y > 1) is true.

|| => or   (x == 5 || y == 5) is false

! => Not   !(x == y) is true.

*Conditional or Trenary Operator:
Syntax: variableName = condition ? value1:value2
eg: let voteable = (age < 18) ? "too young": "vote enough"

*While Loops

var age = 5;
while (age < 10) {
    console.log("You age is less than 10");
    age++;
}
document.write("you are now over 10");  //output: the code will run 5 time then will print the line: "You are now over 10".


*for Loop:
for (expression 1; expression 2; expression 3) {
  // code block to be executed
}

break and for loop:
for (age = 0; age < 10; age++) {
    console.log(age);

    if( age === 7){
        break;
    }
}
document.write ("we break when it come to 7."); //output: 0,1,2,3,4,5,6,7 then, it will print the last line.

* Break and Continue

The break statement "jumps out" of a loop.

The continue statement "jumps over" one iteration in the loop.







puting', 'Information Technology', '2.5 Years');

INSERT INTO Program ( program_ID, program_Name, program_desc, program_duration ) VALUES
    (102, 'BSc in Data Management', 'Database Management', '3 Years');

INSERT INTO Program ( program_ID, program_Name, program_desc, program_duration ) VALUES
    (103, 'BSc in Multimedia', 'Art of multimedia and graphic design', '3 Years');

INSERT INTO Program ( program_ID, program_Name, program_desc, program_duration ) VALUES
    (104, 'Mechanical Engineering', 'Bachelor of Mechanical Engineering', '4 Years');

INSERT INTO Program ( program_ID, program_Name, program_desc, program_duration ) VALUES
    (105, 'Computer Science', 'Bachelor of Computer Science', '3 Years');

INSERT INTO Program ( program_ID, program_Name, program_desc, program_duration ) VALUES
    (106, 'Business Administration', 'Bachelor of Business Administration', '2.5 Years');

INSERT INTO Program ( program_ID, program_Name, program_desc, program_duration ) VALUES
    (107, 'Electrical Engineering', 'Bachelor of Electrical Engineering', '4 Years');


Module Table: 

INSERT INTO Module (module_ID, module_Name, module_Desc, module_code) VALUES
(101, 'Introduction to Programming', 'Basics of programming languages', 'CS101');
INSERT INTO Module (module_ID, module_Name, module_Desc, module_code) VALUES
(102, 'Database', 'Relational database management systems', 'CS102');
INSERT INTO Module (module_ID, module_Name, module_Desc, module_code) VALUES
(103, 'Engineering Mathematics', 'Mathematical principles for engineers', 'EN103');
INSERT INTO Module (module_ID, module_Name, module_Desc, module_code) VALUES
(104, 'Software Engineering', 'Principles of software design', 'CS104');
INSERT INTO Module (module_ID, module_Name, module_Desc, module_code) VALUES
(105, 'Networking Fundamentals', 'Basics of computer networking', 'CS105');
INSERT INTO Module (module_ID, module_Name, module_Desc, module_code) VALUES
(106, 'Data and VideoGraphy', 'study about Image and Video shooting', 'MM106');
INSERT INTO Module (module_ID, module_Name, module_Desc, module_code) VALUES
(107, 'Deep Learning & Machine Learning', 'Foundations of machine learning', 'DS107');


COLUMN PROGRAM_NAME FORMAT A30;
SQL> COLUMN PROGRAM_DESC FORMAT A40;
SQL> COLUMN PROGRAM_DURATION FORMAT A15


Program_Module Table:

INSERT INTO Program_Module (program_ID, module_ID) VALUES             
(101,101);
INSERT INTO Program_Module (program_ID, module_ID) VALUES
(101,105);
INSERT INTO Program_Module (program_ID, module_ID) VALUES
(101,102);
INSERT INTO Program_Module (program_ID, module_ID) VALUES
(102,102);
INSERT INTO Program_Module (program_ID, module_ID) VALUES
(102,107);
INSERT INTO Program_Module (program_ID, module_ID) VALUES
(103,106);
INSERT INTO Program_Module (program_ID, module_ID) VALUES
(103,101);
INSERT INTO Program_Module (program_ID, module_ID) VALUES
(104,104);
INSERT INTO Program_Module (program_ID, module_ID) VALUES
(104,103);
INSERT INTO Program_Module (program_ID, module_ID) VALUES
(104,107);
INSERT INTO Program_Module (program_ID, module_ID) VALUES
(105,101);
INSERT INTO Program_Module (program_ID, module_ID) VALUES
(105,104);
INSERT INTO Program_Module (program_ID, module_ID) VALUES
(105,105);
INSERT INTO Program_Module (program_ID, module_ID) VALUES
(106,103);
INSERT INTO Program_Module (program_ID, module_ID) VALUES
(106,101);
INSERT INTO Program_Module (program_ID, module_ID) VALUES
(107,103);


Student Table:

INSERT INTO Student (student_ID, first_Name, last_Name, email, contact, program_ID) VALUES
(101, 'Suman', 'Shrestha', 'suman@gmail.com', '9812378976', 101);
INSERT INTO Student (student_ID, first_Name, last_Name, email, contact, program_ID) VALUES
(102, 'Aarati', 'Bhandari', 'aarati@gmail.com', '984326789', 102);
INSERT INTO Student (student_ID, first_Name, last_Name, email, contact, program_ID) VALUES
(103, 'Prakash', 'Thapa', 'prakash111@gmail.com', '981367893', 103);
INSERT INTO Student (student_ID, first_Name, last_Name, email, contact, program_ID) VALUES
(104, 'Ramesh', 'Khadka', 'khadkaramesh@gmail.com', '9734678909', 104);
INSERT INTO Student (student_ID, first_Name, last_Name, email, contact, program_ID) VALUES
(105, 'Sandhya', 'Maharjan', 'sandhya98@gmail.com', '9812370655', 105);
INSERT INTO Student (student_ID, first_Name, last_Name, email, contact, program_ID) VALUES
(106, 'Krishna', 'Gurung', 'gurungvai@gmail.com', '9709786433', 106);
INSERT INTO Student (student_ID, first_Name, last_Name, email, contact, program_ID) VALUES
(107, 'Mina', 'Lama', 'mina232@gmail.com', '9842678025', 107);
INSERT INTO Student (student_ID, first_Name, last_Name, email, contact, program_ID) VALUES
(108, 'Kunal', 'Dahal', 'dahalkunal11@gmail.com', '9845634689', 101);
INSERT INTO Student (student_ID, first_Name, last_Name, email, contact, program_ID) VALUES
(109, 'Abishek', 'Raut', 'raut99@gmail.com', '9767258025', 105);
INSERT INTO Student (student_ID, first_Name, last_Name, email, contact, program_ID) VALUES
(110, 'Misan', 'Dahal', 'misan17@gmail.com', '9876528970', 103);
INSERT INTO Student (student_ID, first_Name, last_Name, email, contact, program_ID) VALUES
(111, 'kushal', 'Gautam', 'gautam32@gmail.com', '9812356093', 107);


Student_Module Table:

INSERT INTO Student_Module (student_ID, module_ID) VALUES
(101, 101);
INSERT INTO Student_Module (student_ID, module_ID) VALUES
(102, 101);
INSERT INTO Student_Module (student_ID, module_ID) VALUES
(103, 107);
INSERT INTO Student_Module (student_ID, module_ID) VALUES
(102, 106);
INSERT INTO Student_Module (student_ID, module_ID) VALUES
(103, 101);
INSERT INTO Student_Module (student_ID, module_ID) VALUES
(105, 107);
INSERT INTO Student_Module (student_ID, module_ID) VALUES
(111, 102);
INSERT INTO Student_Module (student_ID, module_ID) VALUES
(110, 106);
INSERT INTO Student_Module (student_ID, module_ID) VALUES
(111, 101);
INSERT INTO Student_Module (student_ID, module_ID) VALUES
(109, 105);
INSERT INTO Student_Module (student_ID, module_ID) VALUES
(106, 104);
INSERT INTO Student_Module (student_ID, module_ID) VALUES
(108, 103);
INSERT INTO Student_Module (student_ID, module_ID) VALUES
(111, 103);
INSERT INTO Student_Module (student_ID, module_ID) VALUES
(107, 104);


Resources Table: 

INSERT INTO Resources (resource_ID, resource_Title, resource_Type, resource_duration, module_ID) VALUES
(101, 'C Programming Notes', 'PDF', '2 Hours', 101);
INSERT INTO Resources (resource_ID, resource_Title, resource_Type, resource_duration, module_ID) VALUES
(102, 'SQL Tutorial', 'Video', '3 Hours', 102);
INSERT INTO Resources (resource_ID, resource_Title, resource_Type, resource_duration, module_ID) VALUES
(103, 'Math Guide', 'PDF', '1.5 Hours', 103);
INSERT INTO Resources (resource_ID, resource_Title, resource_Type, resource_duration, module_ID) VALUES
(104, 'Finance Case Studies', 'Video', '5 Hours', 104);
INSERT INTO Resources (resource_ID, resource_Title, resource_Type, resource_duration, module_ID) VALUES
(105, 'Software Design Patterns', 'Book', '10 Hours', 105);
INSERT INTO Resources (resource_ID, resource_Title, resource_Type, resource_duration, module_ID) VALUES
(106, 'Networking Basics', 'Online Course', '2.5 Hours', 106);
INSERT INTO Resources (resource_ID, resource_Title, resource_Type, resource_duration, module_ID) VALUES
(107, 'Machine Learning Algorithms', 'PDF', '3 Hours', 107);


Student_Resource Table;

INSERT INTO Student_Resource (resource_ID, module_ID, student_ID) VALUES
(101, 101, 102);
INSERT INTO Student_Resource (resource_ID, module_ID, student_ID) VALUES
(102, 102, 101);
INSERT INTO Student_Resource (resource_ID, module_ID, student_ID) VALUES
(103, 103, 102);
INSERT INTO Student_Resource (resource_ID, module_ID, student_ID) VALUES
(104, 104, 103);
INSERT INTO Student_Resource (resource_ID, module_ID, student_ID) VALUES
(105, 105, 106);
INSERT INTO Student_Resource (resource_ID, module_ID, student_ID) VALUES
(106, 106, 105);
INSERT INTO Student_Resource (resource_ID, module_ID, student_ID) VALUES
(102, 102, 107);
INSERT INTO Student_Resource (resource_ID, module_ID, student_ID) VALUES
(101, 101, 104);
INSERT INTO Student_Resource (resource_ID, module_ID, student_ID) VALUES
(105, 105, 102);
INSERT INTO Student_Resource (resource_ID, module_ID, student_ID) VALUES
(101, 101, 106);

Teacher Table:

INSERT INTO Teacher (teacher_ID, teacher_name, email, phone) VALUES
(101, 'Dr. Rajendra Shrestha', 'rajendra@gmail.com', '9800001001');
INSERT INTO Teacher (teacher_ID, teacher_name, email, phone) VALUES
(102, 'Prof. Sunita Sharma', 'sunita@gmail.com', '9800001002');
INSERT INTO Teacher (teacher_ID, teacher_name, email, phone) VALUES
(103, 'Dr. Arjun KC', 'arjun@gmail.com', '985345501003');
INSERT INTO Teacher (teacher_ID, teacher_name, email, phone) VALUES
(104, 'Prof. Anita Rai', 'raianita@gmail.com', '9812567857');
INSERT INTO Teacher (teacher_ID, teacher_name, email, phone) VALUES
(105, 'Dr. Aashish Neupane', 'neupane123@gmail.com', '9823456765');
INSERT INTO Teacher (teacher_ID, teacher_name, email, phone) VALUES
(106, 'Dr. Bikash Limbu', 'bikash22@gmail.com', '9843563453');
INSERT INTO Teacher (teacher_ID, teacher_name, email, phone) VALUES
(107, 'Prof.Saugat Adhikari ', 'saugat112@gmail.com', '9843269064');
INSERT INTO Teacher (teacher_ID, teacher_name, email, phone) VALUES
(108, 'Bhavin Khatri', 'bhavin111@gmail.com', '9824234644');
INSERT INTO Teacher (teacher_ID, teacher_name, email, phone) VALUES
(109, 'Sila Rai', 'silarai@gmail.com', '98234353422');

Teacher_Module Table:

INSERT INTO Teacher_Module (teacher_ID, module_ID) VALUES
(101, 101);
INSERT INTO Teacher_Module (teacher_ID, module_ID) VALUES
(101, 106);
INSERT INTO Teacher_Module (teacher_ID, module_ID) VALUES
(102, 105);
INSERT INTO Teacher_Module (teacher_ID, module_ID) VALUES
(102, 106);
INSERT INTO Teacher_Module (teacher_ID, module_ID) VALUES
(103, 101);
INSERT INTO Teacher_Module (teacher_ID, module_ID) VALUES
(103, 105);
INSERT INTO Teacher_Module (teacher_ID, module_ID) VALUES
(104, 104);
INSERT INTO Teacher_Module (teacher_ID, module_ID) VALUES
(104, 106);
INSERT INTO Teacher_Module (teacher_ID, module_ID) VALUES
(105, 102);
INSERT INTO Teacher_Module (teacher_ID, module_ID) VALUES
(105, 107);
INSERT INTO Teacher_Module (teacher_ID, module_ID) VALUES
(106, 106);
INSERT INTO Teacher_Module (teacher_ID, module_ID) VALUES
(106, 102);
INSERT INTO Teacher_Module (teacher_ID, module_ID) VALUES
(107, 101);
INSERT INTO Teacher_Module (teacher_ID, module_ID) VALUES
(107, 106);
INSERT INTO Teacher_Module (teacher_ID, module_ID) VALUES
(104, 107);


Announcement Table:

INSERT INTO Announcement (announcement_ID, title, date_posted, teacher_ID, module_ID) VALUES
(201, 'Assignment on Programming Basics', '15-jan-2025', 101, 101);
INSERT INTO Announcement (announcement_ID, title, date_posted, teacher_ID, module_ID) VALUES
(202, 'Database Design Workshop', '20-may-2024', 102, 102);
INSERT INTO Announcement (announcement_ID, title, date_posted, teacher_ID, module_ID) VALUES
(203, 'Engineering Mathematics Quiz', '10-may-2025', 103, 103);
INSERT INTO Announcement (announcement_ID, title, date_posted, teacher_ID, module_ID) VALUES
(204, 'Software Engineering Project Guidelines', '30-june-2025', 104, 104);
INSERT INTO Announcement (announcement_ID, title, date_posted, teacher_ID, module_ID) VALUES
(205, 'Networking Fundamentals Exam', '22-may-2024', 105, 105);
INSERT INTO Announcement (announcement_ID, title, date_posted, teacher_ID, module_ID) VALUES
(206, 'Video Editing Techniques', '18-dec-2024', 106, 106);
INSERT INTO Announcement (announcement_ID, title, date_posted, teacher_ID, module_ID) VALUES
(207, 'Machine Learning Competition', '17-may-2024', 107, 107);


Assessment Table: 
INSERT INTO Assessment (assessment_ID, title, deadline, weightage, module_ID, student_ID) VALUES
(201, 'Programming Basics Assignment 1', '23-jan-2025', '20%', 101, 101);
INSERT INTO Assessment (assessment_ID, title, deadline, weightage, module_ID, student_ID) VALUES
(202, 'Database Project', '10-dec-2024', '50%', 102, 102);
INSERT INTO Assessment (assessment_ID, title, deadline, weightage, module_ID, student_ID) VALUES
(203, 'Engineering Mathematics Midterm', '10-feb-2025', '75%', 103, 101);
INSERT INTO Assessment (assessment_ID, title, deadline, weightage, module_ID, student_ID) VALUES
(204, 'Software Engineering Design Report', '25-may-2024', '15%', 101, 105);
INSERT INTO Assessment (assessment_ID, title, deadline, weightage, module_ID, student_ID) VALUES
(205, 'Networking Fundamentals Practical', '30-mar-2025', '100%', 105, 109);
INSERT INTO Assessment (assessment_ID, title, deadline, weightage, module_ID, student_ID) VALUES
(206, 'Video Editing Project', '01-april-2025', '20%', 106, 107);
INSERT INTO Assessment (assessment_ID, title, deadline, weightage, module_ID, student_ID) VALUES
(207, 'Machine Learning Final Exam', '14-may-2025', '40%', 107, 102);


Result Table:

INSERT INTO Result (result_ID, student_ID, assessment_ID, total_marks) VALUES
(301, 101, 201, 85);
INSERT INTO Result (result_ID, student_ID, assessment_ID, total_marks) VALUES
(302, 102, 202, 90);
INSERT INTO Result (result_ID, student_ID, assessment_ID, total_marks) VALUES
(303, 103, 203, 15);
INSERT INTO Result (result_ID, student_ID, assessment_ID, total_marks) VALUES
(304, 104, 204, 65);
INSERT INTO Result (result_ID, student_ID, assessment_ID, total_marks) VALUES
(305, 105, 205, 25);
INSERT INTO Result (result_ID, student_ID, assessment_ID, total_marks) VALUES
(306, 106, 206, 88);
INSERT INTO Result (result_ID, student_ID, assessment_ID, total_marks) VALUES
(307, 107, 207, 92);
INSERT INTO Result (result_ID, student_ID, assessment_ID, total_marks) VALUES
(308, 108, 201, 38);
INSERT INTO Result (result_ID, student_ID, assessment_ID, total_marks) VALUES
(309, 109, 202, 84);
INSERT INTO Result (result_ID, student_ID, assessment_ID, total_marks) VALUES
(310, 110, 203, 80);



Informational Queries: 

1) List the programs that are available in the college and the total number of students enrolled
in each.

SELECT p.program_Name, COUNT(s.student_ID) AS total_students
    FROM Program p
    LEFT JOIN Student s ON p.program_ID = s.program_ID
    GROUP BY p.program_Name;


2) List all the announcements made for a particular module starting from 1st May 2024 to
28th May 2024.

SELECT A.title, A.date_posted, M.module_name
FROM Announcement A
JOIN Teacher_Module TM ON A.teacher_ID = TM.teacher_ID
JOIN Module M ON TM.module_ID = M.module_ID
WHERE A.date_posted BETWEEN '01-may-2024' AND '28-may-2024'
ORDER BY A.date_posted;



3. List the names of all modules that begin with the letter 'D', along with the total number of
resources uploaded for those modules.

SELECT m.module_Name, COUNT(r.resource_ID) AS total_resources_uploaded
FROM Module m
LEFT JOIN Resources r ON m.module_ID = r.module_ID
WHERE m.module_Name LIKE 'D%'
GROUP BY m.module_Name;


4. List the names of all students along with their enrolled program who have not submitted
any assessments for a particular module.


SELECT S.first_Name, S.last_Name, P.program_Name
FROM Student S
JOIN Program P ON S.program_ID = P.program_ID
WHERE S.student_ID NOT IN (
    SELECT A.student_ID
    FROM Assessment A
)
ORDER BY S.first_Name, S.last_Name;





5. List all the teachers who teach more than one module. 


SELECT 
    t.teacher_name, 
    COUNT(tm.module_id) AS Padaune_Module
FROM 
    Teacher t
JOIN 
    Teacher_Module tm ON t.teacher_id = tm.teacher_id
GROUP BY 
    t.teacher_name
HAVING 
    COUNT(tm.module_id) > 1;


Transaction Query: 

q.no:1) 

SELECT module_Name, latest_deadline
FROM (
  SELECT M.module_Name, MAX(A.deadline) AS latest_deadline
  FROM Module M
  JOIN Assessment A ON M.module_ID = A.module_ID
  GROUP BY M.module_Name
  ORDER BY latest_deadline DESC
)
WHERE ROWNUM = 1;

q.no:2)

SELECT *
    FROM (
        SELECT
            s.student_ID,
            s.first_Name, s.last_Name,
            SUM(r.total_marks) AS total_score
        FROM
            Student s
        JOIN
           Result r ON s.student_ID = r.student_ID
       GROUP BY
           s.student_ID, s.first_Name, s.last_Name
       ORDER BY
           total_score DESC
   )
   WHERE ROWNUM <= 3;

q.no:3)

SELECT 
    p.program_ID,
    p.program_Name,
    COUNT(a.assessment_ID) AS total_assessments,
    AVG(r.total_marks) AS average_score
FROM 
    Program p
JOIN 
    Student s ON p.program_ID = s.program_ID
JOIN 
    Assessment a ON s.student_ID = a.student_ID
JOIN 
    Result r ON a.assessment_ID = r.assessment_ID
GROUP BY 
    p.program_ID, p.program_Name;


q.no) 4:
SELECT 
    s.student_ID,
    s.first_Name, s.last_Name,
    r.total_marks
FROM 
    Student s
JOIN 
    Result r ON s.student_ID = r.student_ID
JOIN 
    Assessment a ON r.assessment_ID = a.assessment_ID
JOIN 
    Module m ON a.module_ID = m.module_ID
WHERE 
    m.module_Name = 'Database'
    AND (r.total_marks) > (
        SELECT 
            AVG(r2.total_marks)
        FROM 
            Result r2
        JOIN 
            Assessment a2 ON r2.assessment_ID = a2.assessment_ID
        JOIN 
            Module m2 ON a2.module_ID = m2.module_ID
        WHERE 
            m2.module_Name = 'Database'
    );


q.no: 5) 

SELECT 
    s.student_ID,
    s.first_Name, s.last_Name,
    m.module_Name,
    SUM(r.total_marks) AS total_aggregate_marks,
    CASE
        WHEN SUM(r.total_marks) >= 40 THEN 'Pass'
        ELSE 'Fail'
    END AS remarks
FROM 
    Student s
JOIN 
    Result r ON s.student_ID = r.student_ID
JOIN 
    Assessment a ON r.assessment_ID = a.assessment_ID
JOIN 
    Module m ON a.module_ID = m.module_ID
GROUP BY 
    s.student_ID, s.first_Name, s.last_Name, m.module_Name;
























